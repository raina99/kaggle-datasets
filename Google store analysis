
## Exploratory analysis
train = pd.read_csv("../input/train.csv")
test = pd.read_csv("../input/test.csv")
# train_df = pd.read_csv('flatten_train.csv')
# test_df = pd.read_csv('flatten_test.csv')


# helper functions
def constant_cols(df):
    cols = []
    columns = df.columns.values
    for col in columns:
        if df[col].nunique(dropna = False) == 1:
            cols.append(col)
    return cols

def diff_cols(df1,df2):
    columns1 = df1.columns.values
    columns2 = df2.columns.values
    print(list(set(columns1) - set(columns2)))
    

def count_mean(col,color1,color2):
    col_count = train_df[col].value_counts()
    col_count_chart = go.Bar(x = col_count.head(10).index, y = col_count.head(10).values, name="Count",marker = dict(color=color1))

    col_mean_count = train_df[[col,'totals.transactionRevenue']][(train_df['totals.transactionRevenue'] >1)]
    col_mean_count = col_mean_count.groupby(col)['totals.transactionRevenue'].mean().sort_values(ascending=False)
    col_mean_count_chart = go.Bar(x = col_mean_count.head(10).index, y = col_mean_count.head(10).values, name="Mean",marker = dict(color=color2))

    fig = tools.make_subplots(rows = 1, cols = 2,subplot_titles=('Total Count','Mean Revenue'))
    fig.append_trace(col_count_chart, 1,1)
    fig.append_trace(col_mean_count_chart,1,2)
    py.iplot(fig)
 

def load_df(csv_path='../input/train.csv', nrows=None):
    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']
    
    df = pd.read_csv(csv_path, 
                     converters={column: json.loads for column in JSON_COLUMNS}, 
                     dtype={'fullVisitorId': 'str'}, # Important!!
                     nrows=nrows)
                     
    
    for column in JSON_COLUMNS:
        column_as_df = json_normalize(df[column])
        column_as_df.columns = [f"{column}.{subcolumn}" for subcolumn in column_as_df.columns]
        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)
    print(f"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}")
    return df
    
    
    
test_df = load_df("../input/test.csv")


diff_cols(train_df,test_df)

train_constants = constant_cols(train_df)
test_constants = constant_cols(test_df)
print(train_constants)
print(test_constants)

train_constants = constant_cols(train_df)
test_constants = constant_cols(test_df)
train_df = train_df.drop(columns=train_constants,axis = 1)
test_df = test_df.drop(columns=test_constants, axis = 1)


### still working









